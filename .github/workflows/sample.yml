name: Build and Deploy

env:
  APP_NAME: my-application
  DOCKER_IMAGE: "my-registry/${{ env.APP_NAME }}:${{ GITHUB_RUN_ID }}"
  BUILD_ENV: "${{ inputs.BUILD_TYPE }}"

on:
  workflow_dispatch:
    inputs:
      BRANCH_NAME:
        type: string
        default: main
        description: Git branch to build
      BUILD_TYPE:
        type: choice
        options: ['development', 'staging', 'production']
        description: Build environment type
      RUN_TESTS:
        type: boolean
        default: true
        description: Run tests before building
      PUSH_IMAGE:
        type: boolean
        default: true
        description: Push Docker image to registry

jobs:

  checkout-code:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: pavanskipo/test-gen-ai
          branch: ${{ inputs.BRANCH_NAME }}

  build-application:
    runs-on: ubuntu-latest
    needs: checkout-code
    env:
      ENV: ${{ inputs.BUILD_TYPE }}
    steps:
      - name: Build application
        run: |
          make build

  run-tests:
    runs-on: ubuntu-latest
    needs: build-application
    if: inputs.RUN_TESTS == 'true'
    steps:
      - name: Run tests
        run: |
          make test

  build-docker-image:
    runs-on: ubuntu-latest
    needs: run-tests
    env:
      ENV: ${{ inputs.BUILD_TYPE }}
    steps:
      - name: Log in to Docker registry
        uses: docker/login-action@v3
        with:
          registry: my-registry
          credentials-id: docker-registry-credentials
      - name: Build Docker image
        id: build-docker
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          labels: |
            org.opencontainers.image.description: Built from GitHub Actions
      - name: Build and push Docker image
        uses: docker/build-action@v5
        with:
          context: .
          file: ./Dockerfile
          args: ${{ env.ENV }}

  push-docker-image:
    runs-on: ubuntu-latest
    needs: build-docker-image
    if: inputs.PUSH_IMAGE == 'true'
    steps:
      - name: Log in to Docker registry
        uses: docker/login-action@v3
        with:
          registry: my-registry
          credentials-id: docker-registry-credentials
      - name: Push Docker image
        id: push-docker
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          labels: |
            org.opencontainers.image.description: Deployed from GitHub Actions
      - name: Tag and push latest
        if: startsWith(github.ref, 'refs/heads/main')
        run: |
          docker tag ${{ steps.build-docker-image.outputs.metadata.[${{ env.DOCKER_IMAGE }}].image-id }} my-registry/${{ env.APP_NAME }}:latest
          docker push my-registry/${{ env.APP_NAME }}:latest

  cleanup:
    runs-on: ubuntu-latest
    needs: push-docker-image
    steps:
      - name: Cleanup
        uses: actions.cleanup@v1.0.0
